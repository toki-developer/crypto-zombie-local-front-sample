/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewZombie = ContractEventLog<{
  zombieId: string;
  name: string;
  dna: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ZombieFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ZombieFactory;
  clone(): ZombieFactory;
  methods: {
    createRandomZombie(_name: string): NonPayableTransactionObject<void>;

    testFunc(): NonPayableTransactionObject<string>;

    zombies(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      dna: string;
      0: string;
      1: string;
    }>;
  };
  events: {
    NewZombie(cb?: Callback<NewZombie>): EventEmitter;
    NewZombie(options?: EventOptions, cb?: Callback<NewZombie>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewZombie", cb: Callback<NewZombie>): void;
  once(
    event: "NewZombie",
    options: EventOptions,
    cb: Callback<NewZombie>
  ): void;
}
